// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wlchs/blog/internal/container (interfaces: Container)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/wlchs/blog/internal/repository"
	zap "go.uber.org/zap"
)

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// GetLogger mocks base method.
func (m *MockContainer) GetLogger() *zap.SugaredLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.SugaredLogger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockContainerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockContainer)(nil).GetLogger))
}

// GetPostRepository mocks base method.
func (m *MockContainer) GetPostRepository() repository.PostRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostRepository")
	ret0, _ := ret[0].(repository.PostRepository)
	return ret0
}

// GetPostRepository indicates an expected call of GetPostRepository.
func (mr *MockContainerMockRecorder) GetPostRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostRepository", reflect.TypeOf((*MockContainer)(nil).GetPostRepository))
}

// GetUserRepository mocks base method.
func (m *MockContainer) GetUserRepository() repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockContainerMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockContainer)(nil).GetUserRepository))
}
